{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,2DAAuC;AACvC,gFAAgD;AAMhD;IAA6C,2CAAe;IAW1D,yBAAY,EAA4C;QAA1C,IAAA,kBAAM,EAAE,qCAAO;QAA7B,YACE,kBAAM,IAAI,CAAC,SAEZ;QAbM,YAAM,GAAG,KAAK,CAAC;QACd,eAAS,GAAG;YAClB,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;YAC5B,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;YAC9B,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI;YAC1B,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;YAC5B,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,OAAO;YAC7B,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK;SAC7B,CAAC;QAIA,MAAM,CAAC,IAAI,CAAC,KAAI,CAAC,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,CAAC;;IAC/C,CAAC;IAED,6BAAG,GAAH,UAAI,IAAS,EAAE,QAAoB;QAAnC,iBAYC;QAXC,YAAY,CAAC;YACX,KAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,IAAM,KAAK,GAAI,IAAI,CAAC,SAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;YAChD,IAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YAC5C,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SACvC;QAED,QAAQ,EAAE,CAAC;IACb,CAAC;IAED,sBAAI,mCAAM;aAAV;YACE,OAAO,MAAM,CAAC;QAChB,CAAC;;;OAAA;IAEO,sCAAY,GAApB,UAAqB,OAA2B;QAC9C,IAAI,CAAC,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC;QAEjD,0BACE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE,IAC9B,OAAO,EACX;IACH,CAAC;IAEO,0CAAgB,GAAxB,UAAyB,GAAQ;QAC/B,OAAO,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IAChD,CAAC;IAEO,0CAAgB,GAAxB,UAAyB,KAAsB;QAC7C,OAAO,KAAK,KAAK,MAAM,CAAC,QAAQ,CAAC,KAAK,IAAI,KAAK,KAAK,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC9E,CAAC;IACH,sBAAC;AAAD,CAAC,AAlDD,CAA6C,2BAAe,GAkD3D;;AAAA,CAAC","sourcesContent":["import * as Sentry from '@sentry/node';\r\nimport TransportStream from 'winston-transport';\r\n\r\nexport interface ISentryTransportOptions extends TransportStream.TransportStreamOptions {\r\n  sentry?: Sentry.NodeOptions;\r\n}\r\n\r\nexport default class SentryTransport extends TransportStream {\r\n  public silent = false;\r\n  private levelsMap = {\r\n    silly: Sentry.Severity.Debug,\r\n    verbose: Sentry.Severity.Debug,\r\n    info: Sentry.Severity.Info,\r\n    debug: Sentry.Severity.Debug,\r\n    warn: Sentry.Severity.Warning,\r\n    error: Sentry.Severity.Error\r\n  };\r\n\r\n  constructor({ sentry, ...opts }: ISentryTransportOptions) {\r\n    super(opts);\r\n    Sentry.init(this.withDefaults(sentry || {}));\r\n  }\r\n\r\n  log(info: any, callback: () => void) {\r\n    setImmediate(() => {\r\n      this.emit('logged', info);\r\n    });\r\n\r\n    const level = (this.levelsMap as any)[info.level];\r\n    if (!this.silent && this.shouldLogMessage(level)) {\r\n      const message = this.normalizeMessage(info);\r\n      Sentry.captureMessage(message, level);\r\n    } \r\n\r\n    callback();\r\n  }\r\n\r\n  get sentry() {\r\n    return Sentry;\r\n  }\r\n\r\n  private withDefaults(options: Sentry.NodeOptions) {\r\n    this.silent = options && options.silent || false;\r\n\r\n    return {\r\n      dsn: process.env.SENTRY_DSN || '',\r\n      ...options\r\n    }\r\n  }\r\n\r\n  private normalizeMessage(msg: any) {\r\n    return msg && msg.message ? msg.message : msg;\r\n  }\r\n\r\n  private shouldLogMessage(level: Sentry.Severity) {\r\n    return level === Sentry.Severity.Error || level === Sentry.Severity.Warning;\r\n  }\r\n};"]}